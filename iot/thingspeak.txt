->nano mqtt-hl1.py

import paho.mqtt.client as mqtt

broker_url = "mqtt.eclipse.org"
broker_port = 1883

client = mqtt.Client()
// client = mqtt.Client(transport = "ws")
client.connect(broker_url, broker_port)

python3 mqtt-hl1.py

->nano mqtt-hl2.py

import paho.mqtt.client as mqtt

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.connect(broker_url, broker_port)

client.publish(topic="Testingtopic1", payload="vnsgu", qos=0, retain=False)

python3 mqtt-hl2.py

->nano mqtt-hl3.py

import paho.mqtt.client as mqtt

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.connect(broker_url, broker_port)

client.subscribe("TestinngTopic" , qos=0)

python3 mqtt-hl3.py

->nano mqtt-hl4.py

import paho.mqtt.client as mqtt

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.connect(broker_url, broker_port)

client.subscribe("TestinngTopic" , qos=0)

client.loop_forever()

python3 mqtt-hl4.py

->nano mqtt-hl5.py

import paho.mqtt.client as mqtt

def on_message(client, userdata, msg):
       print(msg.topic+" "+str(msg.payload))

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.on_message=on_message
client.connect(broker_url, broker_port)

client.subscribe("TestinngTopic" , qos=0)

client.loop_forever()

python3 mqtt-hl5.py

->nano mqtt-hl8.py

import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags,rc):
   print("connect with result code {rc}")

def on_message(client, userdata, message):
       print("msg recieved: "+message.payload.decode())

broker_url = "broker.emqx.io"
broker_port = 1883

client = mqtt.Client()
client.on_connect = on_connect
client.on_message=on_message
client.connect(broker_url, broker_port)

client.subscribe("TestingTopic1" , qos=0)
client.publish(topic="sensor/sensor", payload="TestingPayload", qos=1, retain=False)
client.loop_forever()

->thingspeack

# ThingSpeak Update Using MQTT
# Copyright 2016, MathWorks, Inc

# This is an example of publishing to multiple fields simultaneously.
# Connections over standard TCP, websocket or SSL are possible by setting
# the parameters below.
#
# CPU and RAM usage is collected every 20 seconds and published to a
# ThingSpeak channel using an MQTT Publish
#
# This example requires the Paho MQTT client package which
# is available at: http://eclipse.org/paho/clients/python

from __future__ import print_function
import paho.mqtt.publish as publish
import psutil

###   Start of user configuration   ###   

#  ThingSpeak Channel Settings

# The ThingSpeak Channel ID
# Replace this with your Channel ID
channelID = "XXXX"

# The Write API Key for the channel
# Replace this with your Write API key
apiKey = "XXXXYYYYXXXXYYYY"

#  MQTT Connection Methods

# Set useUnsecuredTCP to True to use the default MQTT port of 1883
# This type of unsecured MQTT connection uses the least amount of system resources.
useUnsecuredTCP = False

# Set useUnsecuredWebSockets to True to use MQTT over an unsecured websocket on port 80.
# Try this if port 1883 is blocked on your network.
useUnsecuredWebsockets = False

# Set useSSLWebsockets to True to use MQTT over a secure websocket on port 443.
# This type of connection will use slightly more system resources, but the connection
# will be secured by SSL.
useSSLWebsockets = True

###   End of user configuration   ###

# The Hostname of the ThinSpeak MQTT service
mqttHost = "mqtt.thingspeak.com"

# Set up the connection parameters based on the connection type
if useUnsecuredTCP:
    tTransport = "tcp"
    tPort = 1883
    tTLS = None

if useUnsecuredWebsockets:
    tTransport = "websockets"
    tPort = 80
    tTLS = None

if useSSLWebsockets:
    import ssl
    tTransport = "websockets"
    tTLS = {'ca_certs':"/etc/ssl/certs/ca-certificates.crt",'tls_version':ssl.PROTOCOL_TLSv1}
    tPort = 443
        
# Create the topic string
topic = "channels/" + channelID + "/publish/" + apiKey

# Run a loop which calculates the system performance every
#   20 seconds and published that to a ThingSpeak channel
#   using MQTT.
while(True):
    
    # get the system performance data
    cpuPercent = psutil.cpu_percent(interval=20)
    ramPercent = psutil.virtual_memory().percent
    print (" CPU =",cpuPercent,"   RAM =",ramPercent)

    # build the payload string
    tPayload = "field1=" + str(cpuPercent) + "&field2=" + str(ramPercent)

    # attempt to publish this data to the topic 
    try:
        publish.single(topic, payload=tPayload, hostname=mqttHost, port=tPort, tls=tTLS, transport=tTransport)

    except (KeyboardInterrupt):
        break

    except:
        print ("There was an error while publishing the data.")


->spidev

import spidev 
import time

spi = spidev.SpiDev(0,0)
spi.open(0,0)
msg = 0xAA
spi.max_speed_hz = 115200
while 1:
        spi.writebytes([0x4,0x06])
        y = spi.readbytes(1)
        print (y)
        time.sleep(0.5)


->i2c

from smbus import SMBus
addr = 0x8
bus = SMBus(1)

numb = 1

print ("enter 1 for on or 0 for off")
while numb == 1:

    ledstate = input(">>>>")
   
    if ledstate == "1":
        bus.write_byte(addr, 0x1)
        block = bus.read_byte_data(addr,0x1)
        print(block)
    elif ledstate == "0":
        bus.write_byte(addr, 0x0)
    else:
        numb = 0


-->uart

import serial
if __name__ == '__main__':

      ser =serial.Serial ('/dev/ttyS0',9600, timeout =1)
      ser.flush()
      while True:
        if ser.in_waiting > 0:
            line=ser.readline().decode('utf-8').rstrip()
            print(line)





















